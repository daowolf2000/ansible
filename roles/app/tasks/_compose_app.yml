---
- name: Install app with docker compose
  vars: # noqa jinja[spacing]
    compose_app_name  : "{{ x_name  | default(undef(hint='You must specify name app')) }}"
    compose_app_state : "{{ x_state | default('started') }}"
    compose_app_path  : "{{ x_path  | default(ansible_user_dir + '/' + compose_app_name) }}"
    compose_app_user  : "{{ x_uid   | default(ansible_user_uid) }}"
    compose_app_group : "{{ x_gid   | default(ansible_user_gid) }}"

    # Путь к каталогу c настройками
    compose_app_conf  : "{{ omit }}"

  block:

    - name: Check required variables is defined
      ansible.builtin.assert:
        that:
          - compose_app_yml is defined
        fail_msg: compose_app_yml is undefined

    - name: Create folder "{{ compose_app_path }}"
      ansible.builtin.file:
        path  : "{{ compose_app_path }}"
        owner : "{{ compose_app_user }}"
        group : "{{ compose_app_group }}"
        state : directory
        mode  : "0750"

    # - name: Install Docker
    #   ansible.builtin.include_role:
    #     docker
    #   vars:
    #     docker_user: "{{ compose_app_user }}"

    - name: Copy docker-compose.yml
      ansible.builtin.template:
        src : "{{ compose_app_name }}.j2"
        dest: "{{ compose_app_path }}/docker-compose.yml"
        mode: "0644"

        # - name: Клонируем папку на целевой сервер
        #   synchronize:
        #     src: "{{ source_directory }}"
        #     dest: "{{ destination_path }}"
        #     recursive: yes
        #     rsync_opts:
        #       - "--delete"
        #       - "-a"
        #       - "-z"

        # - name: Изменяем владельца директории
        #   file:
        #     path: "{{ destination_path }}"
        #     owner: "{{ new_owner }}"
        #     recurse: yes


    - name: Create service
      ansible.builtin.template:
        src: compose_service.j2
        dest: "/etc/systemd/system/{{ compose_app_name }}.service"
        owner: root
        group: root
        mode: "0644"
      register: _service

    - name: Reload systemd daemon
      when: _service is changed
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Start and enable the {{ compose_app_name }}.service
      ansible.builtin.systemd:
        name: "{{ compose_app_name }}"
        enabled: true
        state: "{{ compose_app_state }}"
